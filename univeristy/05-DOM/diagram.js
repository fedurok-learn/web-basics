"use strict";

var tBody,
  diagramContainer,
  // names to be generated by random
  stNames = ["Mark", "Victor", "Roman", "Linus", "Ken", "Lemmy", "Korey"],
  // id of a latest student
  stNum = 0;

window.onload = () => {
  tBody = document.getElementById("table-body");
  diagramContainer = document.getElementById("diagram-container");

  (function generateRandomPresentationData() {
    for (let i = 0; i < Math.floor(Math.random() * 3 + 2); ++i) addStudent();
  })();
};

// set actions and validation on change of name and mark fields
const setFieldActions = studentNum => {
  const isLatin = val => /^[a-zA-Z]+$/.test(val);
  const isEnter = e => {
    let code = e.keyCode || e.which;
    return code == 13;
  };

  const processName = e => {
    if (isEnter(e)) {
      const newVal = e.target.innerText + String.fromCharCode(e.keyCode);
      changeDiagramName(studentNum, newVal);
      e.preventDefault();
      e.target.blur();
    }

    if (!isLatin(String.fromCharCode(e.which))) e.preventDefault();
  };

  const fixMark = val => {
    if (val > 100 || (val[0] === "0" && val.length > 1)) return "100";
    return val;
  };
  const processMark = e => {
    if (isEnter(e)) {
      e.target.innerText = fixMark(e.target.innerText);
      changeDiagramValue(studentNum, e.target.innerText);
      e.preventDefault(); //stop bubling
      e.target.blur();
    }

    if (isNaN(String.fromCharCode(e.which))) e.preventDefault();
  };

  // only latin letters allowed at name field
  // trigger enter and update diagram label
  document.getElementById(
    `student-name-${studentNum}`
  ).onkeypress = processName;
  // only numbers allowed at mark field
  // trigger enter and update diagram height
  document.getElementById(
    `student-mark-${studentNum}`
  ).onkeypress = processMark;

  // trigger when field looses focus
  // (similar to enter key action, just change name or value of diagram)
  document.getElementById(`student-name-${studentNum}`).onblur = e => {
    e.target.innerText = fixMark(e.target.innerText);
    changeDiagramName(studentNum, e.target.innerText);
  };

  document.getElementById(`student-mark-${studentNum}`).onblur = e => {
    e.target.innerText = fixMark(e.target.innerText);
    changeDiagramValue(studentNum, e.target.innerText);
  };
};

const addStudent = (name = "", mark = -1) => {
  // gen random name and mark when not supplied
  if (!name) name = stNames[Math.floor(Math.random() * stNames.length)];
  if (mark === -1) mark = Math.floor(Math.random() * 80 + 20);

  stNum++;
  // append new student to the list
  const tr = document.createElement("tr");
  tr.id = `student${stNum}`;
  tr.innerHTML = `
        <td><button type="button" class="btn btn-link" onclick="removeStudentnDiagram(${stNum})">Видалити</button></td>
        <td><p contenteditable="true" id="student-name-${stNum}">${name}</p></td>
        <td><p contenteditable="true" id="student-mark-${stNum}">${mark}</p></td>
    `;
  tBody.appendChild(tr);

  // disable false characters from typing
  setFieldActions(stNum);

  addDiagram(name, mark);
};

const removeStudentnDiagram = num => {
  const student = document.getElementById(`student${num}`);
  student.parentNode.removeChild(student);
  const diagram = document.getElementById(`diagram${num}`);
  diagram.parentNode.removeChild(diagram);
};

const addDiagram = (name, mark) => {
  const diagram = document.createElement("div");
  diagram.id = `diagram${stNum}`;
  diagram.className = "col";
  diagram.style.cssText = `height: ${mark}%; background-color: ${genBgColor()};`;
  diagram.innerHTML = `<h3 class="mt-3" id="diagram-name-${stNum}">${name}</h3>`;
  diagramContainer.appendChild(diagram);

  // and add tooltip on mouse over
  // that will show student mark
  var tooltip = document.createElement("p");
  tooltip = tooltip.appendChild(document.createElement("h2"));
  var curNum = stNum;
  diagram.onmouseover = () => {
    tooltip.innerText = document.getElementById(
      `student-mark-${curNum}`
    ).innerText;
    diagram.appendChild(tooltip);
  };
  diagram.onmouseleave = () => {
    diagram.removeChild(tooltip);
  };
};

const genBgColor = () => {
  var letters = "0123456789ABCDEF";
  var color = "#";
  for (var i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
};

const changeDiagramName = (num, val) => {
  document.getElementById(`diagram-name-${num}`).innerText = val;
};

const changeDiagramValue = (num, val) => {
  document.getElementById(`diagram${num}`).style.height = `${val}%`;
};
